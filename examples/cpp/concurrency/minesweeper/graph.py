#!/usr/bin/python

# CMSC 12300 - Computer Science with Applications 3
# Borja Sotomayor, 2013

# Generate a graph based on the data produced by
# the performance-test script
#
# Takes a single parameter: the file generated by performance-test

import sys
import re
import pylab
from itertools import product

fname = sys.argv[1]

f = open(fname)

f.readline() # skip header

profiles = {}

nthreads = set()
strategies = set()
radii = set()
sizes = set()
pcts = set()

for line in f:
    fname, threads, strategyname, radius, elapsed, cpuelapsed = line.split(",")
    
    _, size, pct = fname.split(".")[0].split("_")

    x, y = size.split("x")

    size = (int(x), int(y))
    pct = int(re.sub("[^0-9]", "", pct))
    threads = int(threads)
    radius = int(radius)
    elapsed = float(elapsed)
    cpuelapsed = float(cpuelapsed)

    sizes.add(size)
    strategies.add(strategyname)
    radii.add(radius)
    pcts.add(pct)
    nthreads.add(threads)

    profile = (size, threads, pct, radius, strategyname)

    profiles.setdefault(profile, []).append(elapsed)

for profile in profiles:
    times = profiles[profile]
    avg = sum(times) / len(times)
    profiles[profile] = avg

nthreads = sorted(list(nthreads))
strategies = sorted(list(strategies))
radii = sorted(list(radii))
sizes = sorted(list(sizes))
pcts = sorted(list(pcts))

pylab.figure()
#pylab.yscale("log")

strategy = "mines"
names = []
for (size, pct, radius) in product(sizes, pcts, radii):
    names.append("s=%s, p=%i%%, r=%i" % (size,pct,radius))
    times = [profiles[size, t, pct, radius, strategy] for t in nthreads]
    pylab.plot(nthreads, times)
    
pylab.title("Running time")
pylab.ylabel("Time (seconds)")
pylab.xlabel("Number of threads")
pylab.legend(names)

pylab.show()








