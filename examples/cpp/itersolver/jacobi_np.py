#!/usr/bin/python

# CMSC 12300 - Computer Science with Applications 3
# Borja Sotomayor, 2013

"""
Solves a system of linear equations using the
Jacobi method.

This implementation is basically idential to
the one in jacobi.py, except using numpy
arrays instead of Python lists.

The command takes a single parameter:

    jacobi_np.py FILE

FILE: A file containing the system of linear
equations (as generated by gen_lineq.py)
"""

import sys
import numpy as np

fname = sys.argv[1]
f = open(fname)

numEq, numVar = f.readline().strip().split()

numEq = int(numEq)
numVar = int(numVar)

assert(numEq == numVar)

N = numEq

A = np.empty((N,N))
b = np.empty((N,))

for i, line in enumerate(f):
    nums = [float(x) for x in line.strip().split()]
    for j in range(N):
        A[i,j] = nums[j]
    b[i] = nums[-1]

iters=0
converged=False

solution=np.zeros((N,))

while not converged and iters < 10000:
    # Do one iteration
    prevsolution = solution
    solution = np.empty((N,))

    for i in range(N):
        v = 0.0
        for j in range(N):
            if i!=j:
                v+=A[i,j]*prevsolution[j]
        solution[i] = (b[i] - v) / A[i,i]

    iters += 1

    # Has it converged?
    toobig=False
    for prev, cur in zip(prevsolution, solution):
        if abs(prev-cur) >= 0.001:
            toobig=True
    if not toobig:
        converged = True

if not converged:
    print "Did not converge"
else:
    b_sol = [] 
    for i in range(N):
        v = 0.0
        for j in range(N):
            v += solution[j]*A[i,j]
        b_sol.append(v)

    for i in range(N):
        print "x_%i = %.3f" % (i, solution[i])

    print

    for i in range(N):
        print "b_%i = %.3f (%.3f)" % (i, b_sol[i], b[i])

    print "Solved in %i iterations" % iters
